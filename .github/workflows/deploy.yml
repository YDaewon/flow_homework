name: CI/CD to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        working-directory: ./backend/homework
        run: chmod +x gradlew

      - name: Build Spring Boot JAR
        working-directory: ./backend/homework
        run: ./gradlew clean bootJar -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        working-directory: ./backend/homework
        run: |
          IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Copy infra folder to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "infra/*"
          target: "~/deploy"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/deploy/infra

            export DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export IMAGE_URI=${{ env.IMAGE_URI }}

            # ECR 로그인
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # 네트워크 생성 (없으면 무시)
            docker network create app_network || true

            # DB는 항상 up -d (최초 실행 시 컨테이너 생성, 이후엔 유지됨)
            docker-compose -f docker-compose.db.yml up -d

            # 백엔드 교체
            docker pull $IMAGE_URI
            docker-compose -f docker-compose.backend.yml down
            docker-compose -f docker-compose.backend.yml up -d
